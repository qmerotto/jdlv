// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.1
// source: server/grpc/protos/message.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GridHandlerClient is the client API for GridHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GridHandlerClient interface {
	Grid(ctx context.Context, in *Input, opts ...grpc.CallOption) (GridHandler_GridClient, error)
}

type gridHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewGridHandlerClient(cc grpc.ClientConnInterface) GridHandlerClient {
	return &gridHandlerClient{cc}
}

func (c *gridHandlerClient) Grid(ctx context.Context, in *Input, opts ...grpc.CallOption) (GridHandler_GridClient, error) {
	stream, err := c.cc.NewStream(ctx, &GridHandler_ServiceDesc.Streams[0], "/protos.GridHandler/grid", opts...)
	if err != nil {
		return nil, err
	}
	x := &gridHandlerGridClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GridHandler_GridClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type gridHandlerGridClient struct {
	grpc.ClientStream
}

func (x *gridHandlerGridClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GridHandlerServer is the server API for GridHandler service.
// All implementations must embed UnimplementedGridHandlerServer
// for forward compatibility
type GridHandlerServer interface {
	Grid(*Input, GridHandler_GridServer) error
	mustEmbedUnimplementedGridHandlerServer()
}

// UnimplementedGridHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedGridHandlerServer struct {
}

func (UnimplementedGridHandlerServer) Grid(*Input, GridHandler_GridServer) error {
	return status.Errorf(codes.Unimplemented, "method Grid not implemented")
}
func (UnimplementedGridHandlerServer) mustEmbedUnimplementedGridHandlerServer() {}

// UnsafeGridHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GridHandlerServer will
// result in compilation errors.
type UnsafeGridHandlerServer interface {
	mustEmbedUnimplementedGridHandlerServer()
}

func RegisterGridHandlerServer(s grpc.ServiceRegistrar, srv GridHandlerServer) {
	s.RegisterService(&GridHandler_ServiceDesc, srv)
}

func _GridHandler_Grid_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Input)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GridHandlerServer).Grid(m, &gridHandlerGridServer{stream})
}

type GridHandler_GridServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type gridHandlerGridServer struct {
	grpc.ServerStream
}

func (x *gridHandlerGridServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

// GridHandler_ServiceDesc is the grpc.ServiceDesc for GridHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GridHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.GridHandler",
	HandlerType: (*GridHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "grid",
			Handler:       _GridHandler_Grid_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "server/grpc/protos/message.proto",
}
